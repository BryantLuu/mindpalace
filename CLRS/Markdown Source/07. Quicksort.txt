+ In-place
+ Worst case $\Theta(n^2)$
+ Expected case $\Theta(n log(n))$
+ small constant factors

#Description
+ **Divide**: Given array $A[p..r]$, partition into two (possibly empty) subarrays $A[p..q-1]$, $A[q + q..r]$. s.t $A[p..q-1] \le A[q]$ and $A[q + 1.. r] > A[q]$
+ **Conquer**: Sort-subarrays with recursive calls to quicksort
+ **Combine**: No need.

```java
public static void quicksort(double[] A, int p, int r)
{
	if (p < r) {
		q = partition(A, p, r);
		quicksort(A, p, q - 1);
		quicksort(A, q + 1, r);
	}
}

public static int partition(double[] A, int p, int r)
{
	double x = A[r];
	int i = p - 1;
	for (int j = p; j < r - 1; j++)
	{
		if (A[j] <= x) {
			i++;
			swap(A, i , j);
		}
	}
	swap(A[i + 1], A[r]);
	
	return i + 1;
}
```

**Loop Invariant**
1. If $p \le k \le i$, then $A[k] \le x$
2. If $i + 1 \le k \le j - 1$ then $A[k] > x$
3. If $k = r$, then $A[k] = x$

Takes $\Theta(n)$ time

##Performance

Dependent on whether partitioning is balanced or not.

###Worst Case Partitioning

Selects max or min value as pivot. Partitioning costs $\Theta(n)$ time, gets invoked $O(n)$ Times.
Happens when array is already sorted (without randomizing the partition).

##Best Case Partitioning

Most even split. $\Theta(n log(n))$.

$O (n log(n))$ when split is at least a constant proportion

#Randomized Quicksort

```java
public static int randomizedParititon(double[] A, int p, int r)
{
	int i = random(p, r);
	swap(A, r, i );
	return partition(A, p, r);
}

public static void randomizedQuickSort(double[] A, int p, int r)
{
	if (q < r) {
		q = randomizedPartition(A, p, r);
		randomizedQuickSort(A, p, q - 1);
		randomizedQuicksort(A, q + 1, r);
	}
}
```

#Analysis

Worst case $\Theta(n^2)$, expected/best case $O(n log(n))$