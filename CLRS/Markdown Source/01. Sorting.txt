#Sorting

##Notes
###Terminology
+ **_In-place_**:  Only a constant number of elements are stored outside the data struct at any given time
+ **_Loop Invariant_**: The following must be proved
	+ **Initialization**: True prior to first iteration
	+ **Maintenance**: If true before an iteration, remains true before the next iteration
	+ **Termination**: When the loop terminates, the invariant gives useful property to show algorithm is correct
	+ Similar to inductive proofs

###Design
+ **_Incremental Approach_**:  Incrementally solving
	+ Think insertion sort
+ **_Divide and conquer_**
	+ Often recursive to deal with sub-problems
	+ **Divide**: Split the problem into number of smaller sub-problems that are instances of the same problem
	+ **Conquer**: Solve the sub-problems recursively until size is small enough to be solved directly
	+ **Combine**: Use the solutions to the sub-problems to create the solution for the original problem
	+ Think merge-sort

##Insertion Sort

```java
int[] A = {10, -1, 3, 11, 12};
insertionSort(A);

/**
 * Sorts array in ascending order
 * @param A array to be sorted
 */
public static void insertionSort(int[] A)
{
	for (int j = 1; i < A.length; i++) {
		int key = A[j];
		i = j - 1;
		while (i >= 0 && A[i] > key) {
			A[i + 1] = A[i]
			i--;
		}
		A[i + 1] = key;
	}
}
```

###Analysis

$n = $ # of elements
 Worst case $\Theta(n^2)$: Reverse sort
 Best case $\Theta(n)$: Already sorted
**In-place**
**Loop Invariant**: At any iteration j, $A[0...j-1]$ is sorted and consists of elements originally in $A[0..j-1]$

##Merge Sort

```java

/**
 * Sort array A using mergeSort
 * @param A array to be sorted
 */
public static void mergeSort(int[] A)
{
	mergeSort(A, 0, A.length - 1);
}

/**
 * Sorts sub-array A[p..r]
 * @param A array to be sorted
 * @param p start index of sub-array
 * @param r end index of sub-array
 */
public static void mergeSort(int[] A, int p, int r)
{
	if (p < r) {
		int q = (p + r)/2; //implicit floor()
		mergeSort(A, p, q);
		mergeSort(A, q + 1, r);
		merge(A, p, q, r);
	}
}

/**
 * Merges to sorted subarrays A[p...q], A[q + 1... r]
 * p <= q < r
 * @param A array to be sorted
 * @param p start index of first sub-array
 * @param q end index of first sub-array
 * @param r end index of second sub-array
 */
public static void merge(int[] A, int p, int q, int r)
{
	assert p >= 0;
	assert p <= q;
	assert q < r;
	assert r < A.length;
	
	int n1 = q - p + 1;
	int n2 = r - q;
	
	int[] L = new int[n1 + 1];
	int[] R = new int[n2 + 1];
	
	for (int i = 0; i < n1 - 1; i++)
		L[i] = L[p + i];
	
	for (int j = 0; j < n2 - 1; j++)
		R[j] = A[q + j + 1];
	
	L[n1] = Integer.MAX_VALUE;
	L[n2] = Integer.MAX_VALUE;
	
	int i = 0;
	int j = 0;
	
	for (int k = p; k <= r; k++) {
		if (L[i] <= R[j]) {
			A[k] = L[i];
			i++;
		} else {
			A[k] = R[j];
			j++;
		}
	}
}
```

###Analysis
Merge takes $\Theta(n)$ time where $n = r - p + 1$ (length of sub-array)
Merge-sort takes $\Theta(n\ log(n))$ time

+ **Divide**: Divide the n-element sequence into sub-sequences of $n/2$ elements each
+ **Conquer**: Sort the two sub-sequences using merge sort
+ **Combine**: Merge the two sorted sub-sequences

**Loop Invariant**: At start of each iteration of the **for** loop, the sub-array $A[p..k-1]$ contains the $k-p$ smallest elements of $L[1..n_1 + 1]$ and $R[1..n_2 + 1]$ in sorted order. $L[i]$ and $R[j]$ are the smallest elements of their arrays that have not been copied back into $A$.

+ **Initialization**: 
	+ Prior to first init k = p so trivially true, $L[i]$, $R[j]$ are the smallest elements since $L, R$ is sorted
+ **Maintenance**:
	+ Fairly easy to show...
+ **Termination**:
	+ k = r + 1, all elements copied back except for infinity values.

#Bubblesort

```java
public void static bubbleSort(int[] A) {
	for (int i = 0; i < A.length; i++)
		for (int j = A.length; j > i; j--)
			if (A[j] < A[j - 1]) {
				int t = A[j];
				A[j] = A[j - 1];
				A[j - 1] = t;
			}	
}
```
+ $\Theta(n^2)$ worst and best case time
